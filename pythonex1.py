# -*- coding: utf-8 -*-
"""PythonEx1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bdy7PZltINQ1-d5go8ecux_X7T89ipLm
"""
# ju sung kim
import numpy as np
c = np.array([(1.5,2,3),(4,5,6)])
print(c)

import numpy as np
d= np.array([[1,2],[3,4]], dtype=complex)
print(d)

"""##np.zeros(),np.ones(),np.empty()"""

import numpy as np
a = np.zeros((3,4))
print(a)

b= np.ones((2,3,4),np.int8)*255
print(b)
f= np.empty((2,3,4))
print(f)

import numpy as np
a = np.arange(15).reshape(3,5) #15개 배열 생성
print(a)
print('a.shape: ',a.shape)
print('a.ndim : ',a.ndim)

b=np.arange(20)
print('b,ndim : ',b.ndim)

print('a.dtype.name : ',a.dtype.name)
print('b.itemsize : ',b.itemsize)
print('b.size :',b.size)

print('type(a)',type(a))

#np.array()
import numpy as np
temp =[2,3,4]
a= np.array(temp)
print(temp)
print(a)

print(type(a))
print(type(temp))

print('a.dim : ',a.ndim)
print('a.dtype',a.dtype)

temp2 = [1,3,5.1]
b= np.array(temp2)
print(b.dtype)

"""## Numpy index/slice/iterate"""

#index

import numpy as np

a= np.arange(10)**2
print(a)
print(a[2])
print(a[-1])

# slicing 파이썬과 동일하게 어레이를 slicing할수 있다.

print(a[2:5])
print(a[:4:2])
print(a[::-1])

#iterating

for i in a:
  print(i*2)

import numpy as np

def f(x,y):
  return x+y
b = np.fromfunction(f,(5,4),dtype=int)
print(b)
print(b[2,3]) #index
print(b[:,3])
print(b[1:3,])

print(b[-1])
print(b[-1,:])
print(b[-1,])

#for i in b.flat: # flat : x차원을 1차원으로 변경
#  print(i)
c = np.arange(24).reshape(2,3,4)
print(c)

for i in c.flat:
  print(i)

"""### numpy array의 형태를 바꾸기"""

import numpy as np
b= np.arange(12).reshape(3,4)
print(b)

print(b.ravel())

print(b.reshape(4,3))

print(b.reshape(1,12))

"""## 반올림, 내림함수"""

#올림(celling),내림함수(floor), 반올림(around)

import numpy as np

a= np.array([-1.7,-1.5,-1.3,-0.2,0.2,1.3,1.5,1.7,2.0])
print(np.floor(a))
print(np.ceil(a))
print(np.around(a))

print(np.amax(a))
print(np.amin(a))

print(np.argmax(a))
print(np.argmin(a))

"""#전치행렬(transposed)어레이를 반복한다."""

print(b.T)

"""## Numpy 범용함수"""

import numpy as np
b = np.arange(3)
print(b)
print(np.exp(b))
print(np.sqrt(b))

c = np.array([2.,-1.,4.])
#b +=c == np.add(b,c)
print( np.add(b,c))

# add(), mul(),

"""##특정 축에 대한 연산 적용"""

import numpy as np

b= np.arange(12).reshape(3,4)
print(b)
a = [1,2,3,4]
print(b.sum(axis=0)) # sum of each column
print(b.sum(axis=1)) # sum of each row
print(b.cumsum(axis=1)) # cumulative sum along each row
print(b.sum())
print(b.sum(axis=None))

"""### 단항연산 : sum(),min(), max()"""

import numpy as np

temp= [1,2,3,4]
a = np.array(temp) 
print(a.sum())
print(a.min())
print(a.max())

"""#랜덤"""

import numpy as np
a = np.ones((2,3),dtype=int)
b = np.random.random((2,3))

# a= a*3
a *= 3
print(a)
print(b)

b+=a
print(b)

"""### numpy array 곱셈연산, 행렬곱"""

import numpy as np

a = np.array([[1,1],[0,1]])
b = np.array([[2,0],[3,4]])

print(a*b)              # elementwise product
print(a@b)              # matrix product
print(a.dot(b))         # matrix product

"""#제곱"""

import numpy as np
a= np.array([20,30,40,50])
b= np.arange(4)
print(b**2)

for i in range(0,20,1):
  print(np.sin(i))

print(np.sin(a))

"""#numpy array의 산술연산"""

import numpy as np
 
a= np.array([20,30,40,50])
b= np.arange(4)
print(a)
print(b)
c = a - b 
print(c)

"""#reshape()"""

import numpy as np
a = np.arange(12).reshape(4,3)
b= np.arange(24).reshape(2,3,4)
print(a)
print(b)

import numpy as np
import sys
a = np.arange(10000).reshape(100,100)
#np.set_printoptions(threshold=sys.maxsize)
#print(sys.maxsize)
print(a)

import numpy as np

a= np.arange(10,30,5)
b = np.arange(0,2,0.3)
print(a)
print(b)
print(b.dtype)